name: Publish

on: 'push'

env:
  DEFAULT_PYTHON: "3.12"

jobs:
  build:
    name: Build distribution 📦
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.DEFAULT_PYTHON }}
        check-latest: true
    - name: Install pypa/build
      run: >-
        python3 -m
        pip install -r requirements.txt
        build
        --user
    - name: Build a binary wheel and a source tarball
      run: python3 -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  check_version:
    name: Check the version
    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract tag version
        id: extract_tag
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/}
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV

      - name: Extract version from file
        id: extract_file_version
        run: |
          VERSION=$(grep '__VERSION__' ./linux2mqtt/__init__.py | sed -E 's/__VERSION__ = "(.*)"/\1/')
          echo "FILE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Extract version from setup config
        id: extract_config_version
        run: |
          VERSION=$(grep 'version' ./setup.cfg | sed -E 's/version = (.*)[[:space:]]*$/\1/')
          echo "CONFIG_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Compare versions
        run: |
          if [ "$TAG_VERSION" != "$FILE_VERSION" ]; then
            echo "Tag version ($TAG_VERSION) does not match file version ($FILE_VERSION)."
            exit 1
          elif  [ "$TAG_VERSION" != "$CONFIG_VERSION" ]; then
            echo "Tag version ($TAG_VERSION) does not match config version ($CONFIG_VERSION)."
            exit 1
          else
            echo "Tag version ($TAG_VERSION) matches file version ($FILE_VERSION)."
          fi

  publish-to-pypi:
    name: >-
      Publish Python 🐍 distribution 📦 to PyPI
    needs: check_version
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/linux2mqtt  # Replace <package-name> with your PyPI project name
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution 📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    name: >-
      Create GitHub release and attach binaries
    needs:
    - publish-to-pypi
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - name: Get version
      id: version
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$TAG_VERSION" >> $GITHUB_OUTPUT
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref }}
        name: Release ${{ steps.version.outputs.version }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}   
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        '${{ github.ref_name }}' dist/**
        --repo '${{ github.repository }}'